import { ge } from "Compare"
import Float from "Float"
import { identity } from "Function"
import Integer from "Integer"
import { pow } from "Math"
import Random from "Random"
import String from "String"
import { ansiColor } from "Terminal"

import { ANSI_BACKGROUND, ANSI_FOREGROUND, FULL_COLOR_CHANNEL } from "@/Constants"
import { hexFromInt, intFromHex, toHexString } from "@/Hexadecimal"
import { channelB, channelG, channelR } from "@/Math"
import { colorFromSeed } from "@/Random"



export alias Color a = #[a, a, a]
export BLACK = #[0, 0, 0]
export WHITE = #[FULL_COLOR_CHANNEL, FULL_COLOR_CHANNEL, FULL_COLOR_CHANNEL]

export toChannel = where {
  #[r, g, b] =>
    r | g | b
}

export toInteger = where {
  #[r, g, b] =>
    r + g + b
}

export toFloat = where {
  #[r, g, b] =>
    16 + (36 * (r / 255 * 5)) + (6 * (g / 255 * 5)) + (b / 255 * 5)
}

export fromFloat = (v) => {
  r = channelR(v)
  g = channelG(v)
  b = channelB(v)
  return #[r, g, b]
}

export fromHexString = pipe(
  intFromHex,
  fromFloat,
)

export hexFromInt
export toHexString

toList :: Color a -> List a
export toList = where {
  #[r, g, b] =>
    [r, g, b]
}

mixer :: (Color a -> Color a -> Color b) -> Color a -> Color a -> Color b
export mixer = (mix, a, b) => mix(a, b)

mapRGB :: (a -> b) -> (a -> b) -> (a -> b) -> Color a -> Color b
export mapRGB = (fnR, fnG, fnB, a) => where(a) {
  #[r, g, b] =>
    #[fnR(r), fnG(g), fnB(b)]
}

export mapR = mapRGB($, identity, identity)
export mapG = mapRGB(identity, $, identity)
export mapB = mapRGB(identity, identity, $)

change :: (a -> b) -> Color a -> Color b
export change = (fn, a) => mapRGB(fn, fn, fn)(a)

export toTupleFloat = change(Integer.toFloat)

export toTupleInt = change(Float.toInteger)

export invert = (x) => FULL_COLOR_CHANNEL - x

export rgbInvert = change(invert)


// https://github.com/Qix-/color/blob/master/index.js#L263-L274
luminosity :: Color Float -> Float
export luminosity = pipe(
  change(
    (el) => {
      chan = el / 255
      return if (chan < 0.04045) {
        chan / 12.92
      } else {
        pow(((chan + 0.055) / 1.055), 2.4)
      }
    },
  ),
  mapRGB((r) => r * 0.2126, (g) => g * 0.7152, (b) => b * 0.0722),
  toInteger,
)

contrast :: Color Float -> Color Float -> Float
export contrast = (a, b) => {
  aL = luminosity(a)
  bL = luminosity(b)
  aL2 = aL + 0.05
  bL2 = bL + 0.05
  return if (aL > bL) {
    aL2 / bL2
  } else {
    bL2 / aL2
  }
}

export type ContrastLevel = AAALarge | AALarge | AAA | AA | LowContrast

CONTRAST_AAA_LARGE = 4.5
CONTRAST_AA_LARGE = 3
CONTRAST_AAA = 7
CONTRAST_AA = 4.5

contrastLevel :: Boolean -> Color Float -> Color Float -> ContrastLevel
export contrastLevel = (large, a, b) => {
  c = contrast(a, b)
  return if (large) {
    c > CONTRAST_AAA_LARGE ? AAALarge : c > CONTRAST_AA_LARGE ? AALarge : LowContrast
  } else {
    c > CONTRAST_AAA ? AAA : c > CONTRAST_AA ? AA : LowContrast
  }
}

bwContrast :: Color Float -> Color Float
export bwContrast = (color) => {
  b = contrast(color, BLACK)
  w = contrast(color, WHITE)
  return b > w ? BLACK : WHITE
}

contrastBlack :: Color Float -> Boolean
export contrastBlack = pipe(
  bwContrast,
  (x) => x == BLACK,
)

seededAnsi :: String -> String -> List String
export seededAnsi = (seedPrefix, str) => pipe(
  mappend(seedPrefix),
  Random.generateFromString,
  colorFromSeed,
  where {
    #[r, g, b] =>
      do {
        blackChannel = pipe(
          toTupleFloat,
          contrastBlack,
        )(#[r, g, b])
          ? 0
          : FULL_COLOR_CHANNEL
        return map(show)([
          ANSI_FOREGROUND,
          2,
          blackChannel,
          blackChannel,
          blackChannel,
          ANSI_BACKGROUND,
          2,
          r,
          g,
          b,
        ])
      }
  },
)(str)

colorize :: String -> String -> String
export colorize = (seed, raw) => pipe(
  seededAnsi(seed),
  ansiColor($, raw),
)(raw)
