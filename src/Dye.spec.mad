import IO from "IO"
import List from "List"
import String from "String"
import { assertEquals, test } from "Test"

import { caseN2, report } from "Study"

import Dye from "@/Dye"
import { hexFromInt, intFromHex } from "@/Hexadecimal"
import { channelR, toAnsi256 } from "@/Math"
import { seededSeqBg, seededSeqFg } from "@/Random"



report(
  hexFromInt,
  "hexFromInt",
  [
    #[74565, "#012345"],
    #[7903932, "#789abc"],
    #[427, "#0001ab"],
    #[16777206, "#fffff6"],
    #[16702650, "#fedcba"],
    #[-1, "#ffffff"],
  ],
)

report(
  intFromHex,
  "intFromHex",
  [
    #["#012345", 74565],
    #["#789abc", 7903932],
    #["#0001AB", 427],
    #["#fffff6", 16777206],
    #["#fedcba", 16702650],
    #["#FEDCBA", 16702650],
    #["?", -1],
  ],
)

report(
  Dye.fromHexString,
  "fromHexString",
  [
    #["#012345", #[1, 35, 69]],
    #["#789abc", #[120, 154, 188]],
    #["#1AB", #[0, 1, 171]],
    #["#fffff6", #[255, 255, 246]],
    #["#fedcba", #[254, 220, 186]],
    #["#FEDCBA", #[254, 220, 186]],
    #["?", #[255, 255, 255]],
  ],
)

test(
  "toAnsi256",
  () => do {
    _ <- assertEquals(toAnsi256(1, 0, 0), 16)
    _ <- assertEquals(toAnsi256(249, 0, 0), 196)
    _ <- assertEquals(toAnsi256(249, 250, 250), 231)
    _ <- assertEquals(toAnsi256(100, 100, 100), 241)
    return assertEquals(toAnsi256(244, 200, 2), 220)
  },
)

test(
  "seededSeqBg",
  () => do {
    _ <- assertEquals(seededSeqFg("cool"), ["38", "2", "149", "50", "143"])
    _ <- assertEquals(seededSeqBg("cool"), ["48", "2", "149", "50", "143"])
    _ <- assertEquals(seededSeqBg("cool"), ["48", "2", "149", "50", "143"])
    return assertEquals(seededSeqBg("nice"), ["48", "2", "240", "101", "83"])
  },
)

report(
  Dye.seededAnsi("test"),
  "seededAnsi",
  [
    #["cool", ["38", "2", "0", "0", "0", "48", "2", "46", "214", "1"]],
    #["dope", ["38", "2", "255", "255", "255", "48", "2", "207", "49", "90"]],
  ],
)

report(
  Dye.fromFloat,
  "fromFloat",
  [
    #[0xffffff, Dye.WHITE],
    #[0x000000, Dye.BLACK],
    #[0xdeadbe, #[222, 173, 190]],
    #[0x123456, #[18, 52, 86]],
  ],
)
report(
  Dye.luminosity,
  "luminosity",
  [
    #[#[3, 3, 3], 0.0009105809506465124],
    #[#[127, 127, 127], 0.2122307574140552],
    #[#[0, 100, 200], 0.1328447368465958],
    #[#[254, 127, 80], 0.3682876145756371],
    #[#[254, 254, 254], 0.9911020971138298],
  ],
)

report(channelR, "channelR", [#[0xff0000, 0xff], #[0x120000, 0x12]])

report(
  Dye.toChannel,
  "toChannel",
  [#[#[0, 150, 255], 255], #[#[255, 255, 255], 255], #[#[150, 150, 150], 150], #[#[0, 0, 0], 0]],
)

report(
  caseN2(Dye.contrast),
  "contrast",
  [
    #[#[#[0, 0, 0], #[255, 255, 255]], 21],
    #[#[#[255, 255, 255], #[0, 0, 0]], 21],
    #[#[#[255, 255, 255], #[255, 255, 255]], 1],
    #[#[#[255, 255, 255], #[128, 128, 128]], 3.9494396480491156],
  ],
)

report(
  caseN2(Dye.contrastLevel(true)),
  "contrastLevel - large",
  [
    #[#[#[0, 0, 0], #[255, 255, 255]], Dye.AAALarge],
    #[#[#[255, 255, 255], #[0, 0, 0]], Dye.AAALarge],
    #[#[#[255, 255, 255], #[255, 255, 255]], Dye.LowContrast],
    #[#[#[255, 255, 255], #[128, 128, 128]], Dye.AALarge],
  ],
)

report(
  caseN2(Dye.contrastLevel(false)),
  "contrastLevel - not large",
  [
    #[#[#[0, 0, 0], #[255, 255, 255]], Dye.AAA],
    #[#[#[255, 255, 255], #[0, 0, 0]], Dye.AAA],
    #[#[#[255, 255, 255], #[255, 255, 255]], Dye.LowContrast],
    #[#[#[255, 255, 255], #[128, 128, 128]], Dye.LowContrast],
    #[#[#[255, 255, 255], #[0, 128, 128]], Dye.AA],
  ],
)

report(
  Dye.toList,
  "toList",
  [
    #[#[1, 2, 3], [1, 2, 3]],
    #[#[255, 255, 255], [255, 255, 255]],
    #[#[0, 180, 255], [0, 180, 255]],
  ],
)

report(Dye.mapR((x) => x * 2), "mapR", [#[#[10, 0, 0], #[20, 0, 0]], #[#[100, 0, 0], #[200, 0, 0]]])

report(Dye.mapG((x) => x * 2), "mapG", [#[#[0, 10, 0], #[0, 20, 0]], #[#[0, 100, 0], #[0, 200, 0]]])

report(Dye.mapB((x) => x * 2), "mapB", [#[#[0, 0, 10], #[0, 0, 20]], #[#[0, 0, 100], #[0, 0, 200]]])

report(
  Dye.mixer(
    (a, z) => where(#[a, z]) {
      #[#[r1, g1, b1], #[r2, g2, b2]] =>
        #[(r1 + r2) & 0xff, (g1 + g2) & 0xff, (b1 + b2) & 0xff]
    },
    #[127, 127, 127],
  ),
  "Dye.mixer(black)",
  [
    #[#[180, 180, 180], #[51, 51, 51]],
    #[#[0, 0, 0], #[127, 127, 127]],
    #[#[255, 255, 255], #[126, 126, 126]],
  ],
)

ESC_ANSI = '\x1b'

report(
  Dye.toFloat,
  "Dye.toFloat",
  [
    #[#[255, 255, 255], 231],
    #[#[255, 128, 40], 211.84313725490196],
    #[#[123, 12, 0], 104.23529411764704],
  ],
)

report(
  pipe(
    Dye.colorize("check"),
    String.toList,
  ),
  "Dye.colorize",
  [
    #[
      "hey",
      [
        ESC_ANSI,
        '[',
        '3',
        '8',
        ';',
        '2',
        ';',
        '0',
        ';',
        '0',
        ';',
        '0',
        ';',
        '4',
        '8',
        ';',
        '2',
        ';',
        '1',
        '8',
        '5',
        ';',
        '1',
        '4',
        '4',
        ';',
        '1',
        '0',
        'm',
        'h',
        'e',
        'y',
        ESC_ANSI,
        '[',
        '0',
        'm',
      ],
    ],
  ],
)

report(Dye.toTupleInt, "toTupleInt", [#[#[12.02, 30.2, 2.35], #[12, 30, 2]]])

report(Dye.invert, "invert", [#[29, 226]])
report(Dye.rgbInvert, "rgbInvert", [#[#[12, 30, 2], #[243, 225, 253]]])
