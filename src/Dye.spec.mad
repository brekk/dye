import List from "List"
import String from "String"
import { assertEquals, test } from "Test"

import Color from "@/Dye"
import { channelR, toAnsi256 } from "@/Math"
import { seededSeqBg, seededSeqFg } from "@/Random"
import { report } from "@/Test"



test(
  "toAnsi256",
  () => do {
    _ <- assertEquals(toAnsi256(1, 0, 0), 16)
    _ <- assertEquals(toAnsi256(249, 0, 0), 196)
    _ <- assertEquals(toAnsi256(249, 250, 250), 231)
    _ <- assertEquals(toAnsi256(100, 100, 100), 241)
    return assertEquals(toAnsi256(244, 200, 2), 220)
  },
)

test(
  "seededSeqBg",
  () => do {
    _ <- assertEquals(seededSeqFg("cool"), ["38", "2", "149", "50", "143"])
    _ <- assertEquals(seededSeqBg("cool"), ["48", "2", "149", "50", "143"])
    _ <- assertEquals(seededSeqBg("cool"), ["48", "2", "149", "50", "143"])
    return assertEquals(seededSeqBg("nice"), ["48", "2", "240", "101", "83"])
  },
)

test(
  "seeded",
  () => {
    check = Color.seeded("test")
    return assertEquals(check("cool"), ["38", "2", "0", "0", "0", "48", "2", "46", "214", "1"])
  },
)

report(
  Color.fromFloat,
  "fromFloat",
  [
    #[0xffffff, Color.WHITE],
    #[0x000000, Color.BLACK],
    #[0xdeadbe, #[222, 173, 190]],
    #[0x123456, #[18, 52, 86]],
  ],
)

report(channelR, "channelR", [#[0xff0000, 0xff], #[0x120000, 0x12]])
report(
  Color.contrastByLuminance,
  "contrastByLuminance",
  [#[#[255, 100, 30], Color.WHITE], #[#[30, 120, 255], Color.WHITE], #[Color.BLACK, Color.WHITE]],
)

report(
  Color.toChannel,
  "toChannel",
  [#[#[0, 150, 255], 255], #[#[255, 255, 255], 255], #[#[150, 150, 150], 150], #[#[0, 0, 0], 0]],
)

report(
  Color.toList,
  "toList",
  [
    #[#[1, 2, 3], [1, 2, 3]],
    #[#[255, 255, 255], [255, 255, 255]],
    #[#[0, 180, 255], [0, 180, 255]],
  ],
)

report(
  Color.mapR((x) => x * 2),
  "mapR",
  [#[#[10, 0, 0], #[20, 0, 0]], #[#[100, 0, 0], #[200, 0, 0]]],
)

report(
  Color.mapG((x) => x * 2),
  "mapG",
  [#[#[0, 10, 0], #[0, 20, 0]], #[#[0, 100, 0], #[0, 200, 0]]],
)

report(
  Color.mapB((x) => x * 2),
  "mapB",
  [#[#[0, 0, 10], #[0, 0, 20]], #[#[0, 0, 100], #[0, 0, 200]]],
)

report(
  Color.mixer(
    (a, z) => where(#[a, z]) {
      #[#[r1, g1, b1], #[r2, g2, b2]] =>
        #[(r1 + r2) & 0xff, (g1 + g2) & 0xff, (b1 + b2) & 0xff]
    },
    #[127, 127, 127],
  ),
  "Color.mixer(black)",
  [
    #[#[180, 180, 180], #[51, 51, 51]],
    #[#[0, 0, 0], #[127, 127, 127]],
    #[#[255, 255, 255], #[126, 126, 126]],
  ],
)
